# This is a basic workflow to help you get started with Actions

name: test

on:
  workflow_dispatch:
jobs:
  build:
    runs-on:
      - ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: run command
      shell: bash
      run: |-
        echo "${{ github.workflow }}-${{ github.run_id }}" > job.txt
        echo "testing" > new.txt
        mkdir -p new/test
        echo "{}" > new/test/bar.json
        ls new/test
    # Ensure parameter if_key_exists is set correctly
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: "${{ secrets.SSH_KEY }}"
        name: id_rsa-joels_temp_ssh_server
        known_hosts: "${{ secrets.KNOWN_HOSTS }}"
        if_key_exists: fail
        config: |
          Host JOELS_TEMP_SSH_SERVER
            HostName ${{ secrets.SSH_HOST_NAME }}
            User ${{ secrets.SSH_USER }}
            IdentityFile ~/.ssh/id_rsa-joels_temp_ssh_server
    - name: setup file tranfer file
      uses: actions/github-script@v3
      with:
        script: |-
          const fs = require('fs').promises
          const path = require('path')
          const patterns = "**/*"
          const globber = await glob.create(patterns.replace(",", "\\n"))
          const files = []
          const dirs = []
          const exludes = ['./', '.\\']
          for await (let file of globber.globGenerator()) {
            file = path.relative(process.cwd(), file)
            if ((await fs.lstat(file)).isDirectory()) continue
              path.dirname(file).split(path.sep).reduce((prevPath, folder) => {
              const currentPath = path.join(prevPath, folder, path.sep);
              if (!exludes.includes(file)) {
                dirs.push("mkdir " + currentPath);
              }
              return currentPath;
          }, '');
          files.push("put " + file)
          }
          uniq_dirs = [...new Set(dirs)];
          uniq_dirs.sort((a, b) => {
            return a.length - b.length;
          });
          results = uniq_dirs.concat(files)
          console.log(results)
          fs.writeFile("#{file_name}.txt", results.join("\\n"), (err) => { })
