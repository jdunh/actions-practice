name: jdunham-infomagnus/env_inject_wrapper
on:
  workflow_dispatch:
jobs:
  build:
    runs-on:
      - windows-latest
    steps:
    - name: clean workspace
      shell: bash
      run: rm -rf ${{ github.workspace }}/*
    - name: checkout
      uses: actions/checkout@v2
    - name: create my_script
      shell: bash
      run: |-
        cat > my_script <<'EOL'
        echo "running my_script"
        EOL
        chmod +x my_script
    - name: create envs.properties
      shell: bash
      run: echo "ruby=true" > envs.properties
#     - name: install groovy
#       shell: bash
#       run: brew install groovy
#     - name: run groovy script
#       shell: groovy {0}
#       run: println "Groovy!!"
    - name: create env properties file
      shell: bash
      run: |-
        cat > ${{ github.run_id }}.properties <<'EOL'
        ! This is a comment
        MY_NAME: matz
        IS_GITHUB=true
        EOL
    - name: inject property file envs
      uses: actions/github-script@v4
      env:
        PROPERTIES_FILES: "${{ github.run_id }}.properties,envs.properties"
      with:
        script: |-
          const fs = require("fs")
          const files = process.env.PROPERTIES_FILES.split(",")
          files.forEach(file => {
            let envs = {}
            fs.readFile(file, 'utf8', (err, data) => {
              const lines = data
                // joins multiline properties
                .replace(/\\\n( )*/g, '')
                .split('\n')
                // removes comments and empty lines
                .filter(line => line && !line.startsWith("#") && !line.startsWith("!"))
              lines.forEach(line => {
                match = line.match(/(?<key>\w+)\s*?[=:]\s*?(?<value>\S.+)/).groups
                envs[match["key"]] = match["value"]
              })
              for (let [key, value] of Object.entries(envs)) {
                if (value.startsWith("$")) {
                  const env_name = value.substring(1)
                  if (env_name in process.env) {
                     value = process.env[env_name]
                  } else if (env_name in envs) {
                    value = envs[env_name]
                  }
                }
                core.exportVariable(key, value);
              }
            })
          });
    - name: run script
      shell: bash
      run: |-
        cat > ./${{ github.run_id }}_script <<'EOL'
        echo "running temp script"
        ls
        EOL
        chmod +x ./${{ github.run_id }}_script
        ./${{ github.run_id }}_script
    - name: run script file
      shell: bash
      run: "./my_script"
    - name: clean up temp files
      shell: bash
      run: |-
        rm -f ${{ github.run_id }}.properties
        rm -f ./${{ github.run_id }}_script
    - name: run command
      shell: bash
      run: |-
        printenv
        ls
