name: jdunham-infomagnus/env_inject_wrapper
on:
  workflow_dispatch:
jobs:
  build:
    runs-on:
      - ubuntu-latest
    steps:
    - name: install groovy
      run: brew install groovy
    - name: create script file
      shell: bash
      run: |- 
        cat > my_script << 'EOL'
        echo "running my script"
        EOL
    - name: checkout
      uses: actions/checkout@v2
    - name: run groovy script
      shell: groovy {0}
      run: println "Groovy!!"
    - name: create env properties file
      shell: bash
      run: |-
        cat > ${{ runner.temp }}/inject-env.properties <<'EOL'
        testing: is_fun
        is_jenkins= false
        EOL
    - name: inject property file envs
      uses: actions/github-script@v4
      env:
        PROPERTIES_FILES: "${{ runner.temp }}/inject-env.properties"
      with:
        script: |-
          const fs = require("fs")
          const files = process.env.PROPERTIES_FILES.split(",")
          files.forEach(file => {
            let envs = {}
            fs.readFile(file, 'utf8', (err, data) => {
              const lines = data
                // joins multiline properties
                .replace(/\\\n( )*/g, '')
                .split('\n')
                // removes comments and empty lines
                .filter(line => line && !line.startsWith("#") && !line.startsWith("!"))
              lines.forEach(line => {
                match = line.match(/(?<key>\w+)\s*?[=:]\s*?(?<value>\S.+)/).groups
                envs[match["key"]] = match["value"]
              })
              for (let [key, value] of Object.entries(envs)) {
                if (value.startsWith("$")) {
                  const env_name = value.substring(1)
                  if (env_name in process.env) {
                     value = process.env[env_name]
                  } else if (env_name in envs) {
                    value = envs[env_name]
                  }
                }
                core.exportVariable(key, value);
              }
            })
          });
    - name: run script
      shell: bash
      run: |-
        cat > ${{ runner.temp }}/temp_script <<'EOL'
        #!/usr/bin/python
        print("Doing something")
        print("very important")
        EOL
        chmod +x ${{ runner.temp }}/temp_script
        ${{ runner.temp }}/temp_script
    - name: run script file
      shell: bash
      run: "./my_script"
    - name: run command
      shell: bash
      run: printenv
